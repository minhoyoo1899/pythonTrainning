# 파이썬에서는 (수학적인 용어인 함수의 거부감을 줄이기 위해서 인지) 상당히 특이한 함수 이름을 가지고 있습니다. 바로 def 예약어를 활용한 함수 선언입니다. 
# 함수의 형태만 확인 할 수 있도록 매개변수를 사용하지 않는 안티 패턴이긴 하나, 그 구조를 확인 했을 때, 매우 다른 모양을 가지고 있어 한번도 읽어 본 적은 없지만, 동작하는 원리가 이해되는 특이한 경험을 하게 될 것입니다. 
# function이든, def이든 '목적'이 모두 동일하기 때문입니다. 

# 함수 작성 방싣은 차치하고서라도 큰 시사점이 존재합니다. 
# HTML이 자바스크립트의 '전유물'은 아니라는 점입니다. 기본적인 형태의 연산과 조립이 가능한 언어라면, 어떤 개발언어이든 간에 HTML을 제작할 수 있다는 관점 입니다. createElement()와 같은 자바스크립트의 내장함수가 존재하진 않지만(모듈사용이 강제) 제약사항은 있을지 몰라도, 제한은 거의 없다고 봐도 무방 합니다. 언어가 바뀌어도 논리와 알고리즘은 동일하다. 라는 중요한 요점입니다. 


pokemon_list = ["피카츄", "라이츄", "파이리", "꼬부기", "버터풀"]
# 자바스크립트의 배열(array)의 형태를 한 데이터 타입을
# 파이썬에서는 list(목록)이라는 직관적인 이름으로 부르고 있습니다. 

open_li_tag = "<li>"
close_li_tag = "</li>"
#  입문인 만큼, 가독성을 위해 따로 전역변수로 설정

def element_maker():
  tag_list = []
  for text_node in pokemon_list:
    tag_list.append(open_li_tag)
    tag_list.append(text_node)
    tag_list.append(close_li_tag)
    return " ".join(tag_list)

    # def = definition "정의" 한다는 의미로 def 키워드가 사용되었는데,
    # 자바스크립트의 function(함수)의 역할과 같습니다. 
    # 본 element_maker() 함수는
    # 자바스크립트에서 일련의 문자열처리로 HTML태그를 생성한 방식을 
    # 그대로 파이썬 방식으로 진행한 모습입니다. 
    # 자바스크립트에서도 지원하는 for in문을 활용, 
    # "인자를 전달받은" 형태로 for loop를 진행한 것을 확인 할 수 있습니다. 
    # 여기서 사용 된 append() 함수는 자바스크립트의 push() 역할과 비슷합니다. 
    # join() 함수의 목적은 자바스크립트와 동일하지만, 
    # 매우 특이한 사용형태가 매우 특이한 것을 확인 할 수 있습니다. 
    # " ": 띄어쓰기 구분자, join()의 인수(args)가 해당 배열인 형태 입니다. 

print(element_maker())
# print("a")

# REPL환경에서 출력해 보면, 배열의 원소 갯수 만큼 
# <li>element</li> 조립된 것을 확인 할 수 있습니다. 
# 이것이 시사하는 바는 파이썬으로도 얼마든지 HTML을 만들 수 있는 점 이라는 것이 큰 특징입니다. 
  