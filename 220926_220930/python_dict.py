# 자바스크립트의 유연한 객체(object)표기법과 사용법 때문에 구분하는 연습이 필요한 반면, 파이썬은 이러한 구분을 데이터 타입을 구분하는 형태로 명시적인 확인을 할 수 있습니다. 이를테면, 자바스크립트에서는 객체(object)의 다양한 접근법을 '혼용'하지만, 파이썬은 '구분'합니다. 

# 태초애 파이썬의 직관적인 작성 철학 때문에 굉장히 직관적인 '사전'이라는 단어를 차용한 것이 인상적입니다.  '딕셔너리'라는 이름은 파이썬의 큰 특징입니다. 
# 이는 데이터를 다루는 관점에선, 엄격한 작성 구분이 상당히 편리한 장점으로 활용 됩니다. 파이썬이 '데이터에 강한' 면모를 보이는 시작점은 바로 엄격한 데이터타입 지원에 있습니다. 관례적으로 사용하는 형태가 다양한지만, 객체를 여러가지로 구분하는관점을 챙기는 것을 권장합니다. 

# 1. 딕셔너리 : 자바스크립트의 리터럴과 비슷
# 2. 클래스 : 생성자 함수로 부터 만들어 진 데이터 (인스턴스)
# 3. 튜플 : 불변형태
# 4. 리스트 : 배열형태

# 객체(object)의 형태가 자바스크립트 보다 더욱 명확하고 다양한 것을 확인 할 수 있습니다. 여기서 주목 할 점은 불변성(immutable)입니다. 
# 큰 데이터를 활용하거나, 변형 할 때 불변하는 것과 변하는 것을 자유자재로 활용할 때 이 점이 파이썬에 큰 강력한 작성법 차원의 지원입니다. 

# 파이썬은 자바스크립트에서 부르는 객체(object)의 형태를
# 사전이란 뜻의 딕셔너리(dictionary),  약칭 dict라고 부릅니다. 

pokemon_example = {
  "id_value" : 1,
  "name" : "이상해 씨",
  "type_value" : "풀",
}

# 특이한 점은 키(key)에 해당하는 property 부분을 정확하게
# "문자열(string)"로 명시한 점을 눈여겨 볼 필요가 있습니다. 
# 마치 JSON 파일 포매팅 형식과 닮았습니다. 

print(pokemon_example["id_value"])
print(pokemon_example["name"])
print(pokemon_example["type_value"])

# dictionary의 속성값을 접근하는 방식은 자바스크립트와 달리 
# [](대괄호) 표기법을 기본으로 하고 있으며,
# 자바스크립트는 점 표기법, 대괄호 표기법 두 개를 병용 할 수 있는 것과 달리 
# 파이썬은 명확하게 딕셔너리 타입일 때, 생성자 함수(class) 일 때를 구분합니다. 

# 이 부분에 대한 표기 벙식이 자바스크립트보다 엄격하기 때문에
# object의 시작점 형태를 수월하게 파악할 수 있는 장점이 있습니다.